<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>kthread (1 samples, 0.49%)</title><rect x="33.1" y="277" width="5.8" height="15.0" fill="rgb(248,54,49)" rx="2" ry="2" />
<text  x="36.14" y="287.5" ></text>
</g>
<g >
<title>_perf_ioctl (191 samples, 93.63%)</title><rect x="44.7" y="229" width="1104.8" height="15.0" fill="rgb(236,58,47)" rx="2" ry="2" />
<text  x="47.71" y="239.5" >_perf_ioctl</text>
</g>
<g >
<title>do_exit (1 samples, 0.49%)</title><rect x="1184.2" y="229" width="5.8" height="15.0" fill="rgb(235,88,18)" rx="2" ry="2" />
<text  x="1187.22" y="239.5" ></text>
</g>
<g >
<title>proactive_compact_node (4 samples, 1.96%)</title><rect x="10.0" y="245" width="23.1" height="15.0" fill="rgb(232,115,35)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >p..</text>
</g>
<g >
<title>ctx_resched (183 samples, 89.71%)</title><rect x="91.0" y="85" width="1058.5" height="15.0" fill="rgb(240,16,17)" rx="2" ry="2" />
<text  x="93.98" y="95.5" >ctx_resched</text>
</g>
<g >
<title>kthread (4 samples, 1.96%)</title><rect x="10.0" y="277" width="23.1" height="15.0" fill="rgb(247,117,32)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >k..</text>
</g>
<g >
<title>acpi_ev_asynch_execute_gpe_method (1 samples, 0.49%)</title><rect x="38.9" y="213" width="5.8" height="15.0" fill="rgb(215,70,52)" rx="2" ry="2" />
<text  x="41.92" y="223.5" ></text>
</g>
<g >
<title>cpu_startup_entry (5 samples, 2.45%)</title><rect x="1155.3" y="261" width="28.9" height="15.0" fill="rgb(229,87,21)" rx="2" ry="2" />
<text  x="1158.29" y="271.5" >cp..</text>
</g>
<g >
<title>acpi_os_execute_deferred (1 samples, 0.49%)</title><rect x="38.9" y="229" width="5.8" height="15.0" fill="rgb(252,102,25)" rx="2" ry="2" />
<text  x="41.92" y="239.5" ></text>
</g>
<g >
<title>__mem_cgroup_uncharge (1 samples, 0.49%)</title><rect x="15.8" y="181" width="5.8" height="15.0" fill="rgb(216,198,19)" rx="2" ry="2" />
<text  x="18.78" y="191.5" ></text>
</g>
<g >
<title>perf_ioctl (192 samples, 94.12%)</title><rect x="44.7" y="245" width="1110.6" height="15.0" fill="rgb(237,49,50)" rx="2" ry="2" />
<text  x="47.71" y="255.5" >perf_ioctl</text>
</g>
<g >
<title>__free_slab (1 samples, 0.49%)</title><rect x="33.1" y="117" width="5.8" height="15.0" fill="rgb(221,115,52)" rx="2" ry="2" />
<text  x="36.14" y="127.5" ></text>
</g>
<g >
<title>file_free_rcu (1 samples, 0.49%)</title><rect x="33.1" y="181" width="5.8" height="15.0" fill="rgb(246,218,52)" rx="2" ry="2" />
<text  x="36.14" y="191.5" ></text>
</g>
<g >
<title>remote_function (190 samples, 93.14%)</title><rect x="50.5" y="133" width="1099.0" height="15.0" fill="rgb(224,75,11)" rx="2" ry="2" />
<text  x="53.49" y="143.5" >remote_function</text>
</g>
<g >
<title>rcu_core (1 samples, 0.49%)</title><rect x="33.1" y="197" width="5.8" height="15.0" fill="rgb(250,198,6)" rx="2" ry="2" />
<text  x="36.14" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.49%)</title><rect x="1184.2" y="277" width="5.8" height="15.0" fill="rgb(242,196,37)" rx="2" ry="2" />
<text  x="1187.22" y="287.5" ></text>
</g>
<g >
<title>smpboot_thread_fn (1 samples, 0.49%)</title><rect x="33.1" y="261" width="5.8" height="15.0" fill="rgb(220,106,45)" rx="2" ry="2" />
<text  x="36.14" y="271.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.49%)</title><rect x="1184.2" y="213" width="5.8" height="15.0" fill="rgb(254,33,16)" rx="2" ry="2" />
<text  x="1187.22" y="223.5" ></text>
</g>
<g >
<title>acpi_ps_get_next_namepath (1 samples, 0.49%)</title><rect x="38.9" y="117" width="5.8" height="15.0" fill="rgb(210,78,16)" rx="2" ry="2" />
<text  x="41.92" y="127.5" ></text>
</g>
<g >
<title>put_ctx (1 samples, 0.49%)</title><rect x="1149.5" y="229" width="5.8" height="15.0" fill="rgb(225,42,40)" rx="2" ry="2" />
<text  x="1152.51" y="239.5" ></text>
</g>
<g >
<title>event_function_call (191 samples, 93.63%)</title><rect x="44.7" y="181" width="1104.8" height="15.0" fill="rgb(232,111,28)" rx="2" ry="2" />
<text  x="47.71" y="191.5" >event_function_call</text>
</g>
<g >
<title>exit_mmap (1 samples, 0.49%)</title><rect x="1184.2" y="197" width="5.8" height="15.0" fill="rgb(246,210,52)" rx="2" ry="2" />
<text  x="1187.22" y="207.5" ></text>
</g>
<g >
<title>kworker/0:1-eve (1 samples, 0.49%)</title><rect x="38.9" y="309" width="5.8" height="15.0" fill="rgb(223,18,42)" rx="2" ry="2" />
<text  x="41.92" y="319.5" ></text>
</g>
<g >
<title>migrate_page (1 samples, 0.49%)</title><rect x="21.6" y="181" width="5.8" height="15.0" fill="rgb(247,174,26)" rx="2" ry="2" />
<text  x="24.57" y="191.5" ></text>
</g>
<g >
<title>acpi_ns_search_and_enter (1 samples, 0.49%)</title><rect x="38.9" y="85" width="5.8" height="15.0" fill="rgb(237,162,13)" rx="2" ry="2" />
<text  x="41.92" y="95.5" ></text>
</g>
<g >
<title>run_ksoftirqd (1 samples, 0.49%)</title><rect x="33.1" y="245" width="5.8" height="15.0" fill="rgb(209,180,50)" rx="2" ry="2" />
<text  x="36.14" y="255.5" ></text>
</g>
<g >
<title>copy_page (1 samples, 0.49%)</title><rect x="21.6" y="165" width="5.8" height="15.0" fill="rgb(210,99,1)" rx="2" ry="2" />
<text  x="24.57" y="175.5" ></text>
</g>
<g >
<title>start_secondary (5 samples, 2.45%)</title><rect x="1155.3" y="277" width="28.9" height="15.0" fill="rgb(206,213,22)" rx="2" ry="2" />
<text  x="1158.29" y="287.5" >st..</text>
</g>
<g >
<title>move_to_new_page (1 samples, 0.49%)</title><rect x="21.6" y="197" width="5.8" height="15.0" fill="rgb(234,54,24)" rx="2" ry="2" />
<text  x="24.57" y="207.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (5 samples, 2.45%)</title><rect x="1155.3" y="293" width="28.9" height="15.0" fill="rgb(234,163,15)" rx="2" ry="2" />
<text  x="1158.29" y="303.5" >se..</text>
</g>
<g >
<title>_perf_event_enable (191 samples, 93.63%)</title><rect x="44.7" y="197" width="1104.8" height="15.0" fill="rgb(219,61,3)" rx="2" ry="2" />
<text  x="47.71" y="207.5" >_perf_event_enable</text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.49%)</title><rect x="1184.2" y="149" width="5.8" height="15.0" fill="rgb(219,183,25)" rx="2" ry="2" />
<text  x="1187.22" y="159.5" ></text>
</g>
<g >
<title>free_unref_page_list (1 samples, 0.49%)</title><rect x="1184.2" y="85" width="5.8" height="15.0" fill="rgb(205,36,9)" rx="2" ry="2" />
<text  x="1187.22" y="95.5" ></text>
</g>
<g >
<title>__perf_event_enable (186 samples, 91.18%)</title><rect x="73.6" y="101" width="1075.9" height="15.0" fill="rgb(233,181,50)" rx="2" ry="2" />
<text  x="76.63" y="111.5" >__perf_event_enable</text>
</g>
<g >
<title>free_pcppages_bulk (1 samples, 0.49%)</title><rect x="1184.2" y="53" width="5.8" height="15.0" fill="rgb(245,109,37)" rx="2" ry="2" />
<text  x="1187.22" y="63.5" ></text>
</g>
<g >
<title>acpi_ns_evaluate (1 samples, 0.49%)</title><rect x="38.9" y="197" width="5.8" height="15.0" fill="rgb(220,94,12)" rx="2" ry="2" />
<text  x="41.92" y="207.5" ></text>
</g>
<g >
<title>compact_zone (4 samples, 1.96%)</title><rect x="10.0" y="229" width="23.1" height="15.0" fill="rgb(237,210,45)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >c..</text>
</g>
<g >
<title>ret_from_fork (4 samples, 1.96%)</title><rect x="10.0" y="293" width="23.1" height="15.0" fill="rgb(232,7,44)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >r..</text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.49%)</title><rect x="1184.2" y="181" width="5.8" height="15.0" fill="rgb(237,127,28)" rx="2" ry="2" />
<text  x="1187.22" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_ioctl (192 samples, 94.12%)</title><rect x="44.7" y="261" width="1110.6" height="15.0" fill="rgb(230,45,54)" rx="2" ry="2" />
<text  x="47.71" y="271.5" >__x64_sys_ioctl</text>
</g>
<g >
<title>intel_pmu_enable_all (172 samples, 84.31%)</title><rect x="154.6" y="53" width="994.9" height="15.0" fill="rgb(231,202,28)" rx="2" ry="2" />
<text  x="157.61" y="63.5" >intel_pmu_enable_all</text>
</g>
<g >
<title>free_pages_and_swap_cache (1 samples, 0.49%)</title><rect x="1184.2" y="117" width="5.8" height="15.0" fill="rgb(206,174,0)" rx="2" ry="2" />
<text  x="1187.22" y="127.5" ></text>
</g>
<g >
<title>rcu_core_si (1 samples, 0.49%)</title><rect x="33.1" y="213" width="5.8" height="15.0" fill="rgb(213,108,33)" rx="2" ry="2" />
<text  x="36.14" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.49%)</title><rect x="33.1" y="229" width="5.8" height="15.0" fill="rgb(220,163,14)" rx="2" ry="2" />
<text  x="36.14" y="239.5" ></text>
</g>
<g >
<title>__put_page (1 samples, 0.49%)</title><rect x="15.8" y="197" width="5.8" height="15.0" fill="rgb(210,58,9)" rx="2" ry="2" />
<text  x="18.78" y="207.5" ></text>
</g>
<g >
<title>perf_event_for_each_child (191 samples, 93.63%)</title><rect x="44.7" y="213" width="1104.8" height="15.0" fill="rgb(245,59,11)" rx="2" ry="2" />
<text  x="47.71" y="223.5" >perf_event_for_each_child</text>
</g>
<g >
<title>acpi_ps_get_next_arg (1 samples, 0.49%)</title><rect x="38.9" y="133" width="5.8" height="15.0" fill="rgb(240,225,14)" rx="2" ry="2" />
<text  x="41.92" y="143.5" ></text>
</g>
<g >
<title>acpi_ps_execute_method (1 samples, 0.49%)</title><rect x="38.9" y="181" width="5.8" height="15.0" fill="rgb(216,84,31)" rx="2" ry="2" />
<text  x="41.92" y="191.5" ></text>
</g>
<g >
<title>acpi_ps_parse_aml (1 samples, 0.49%)</title><rect x="38.9" y="165" width="5.8" height="15.0" fill="rgb(221,177,46)" rx="2" ry="2" />
<text  x="41.92" y="175.5" ></text>
</g>
<g >
<title>__free_one_page (1 samples, 0.49%)</title><rect x="1184.2" y="37" width="5.8" height="15.0" fill="rgb(217,46,39)" rx="2" ry="2" />
<text  x="1187.22" y="47.5" ></text>
</g>
<g >
<title>smp_call_function_single (191 samples, 93.63%)</title><rect x="44.7" y="165" width="1104.8" height="15.0" fill="rgb(214,87,23)" rx="2" ry="2" />
<text  x="47.71" y="175.5" >smp_call_function_single</text>
</g>
<g >
<title>tclsh8.6 (1 samples, 0.49%)</title><rect x="1184.2" y="309" width="5.8" height="15.0" fill="rgb(251,228,18)" rx="2" ry="2" />
<text  x="1187.22" y="319.5" ></text>
</g>
<g >
<title>worker_thread (1 samples, 0.49%)</title><rect x="38.9" y="261" width="5.8" height="15.0" fill="rgb(212,163,37)" rx="2" ry="2" />
<text  x="41.92" y="271.5" ></text>
</g>
<g >
<title>discard_slab (1 samples, 0.49%)</title><rect x="33.1" y="133" width="5.8" height="15.0" fill="rgb(235,11,43)" rx="2" ry="2" />
<text  x="36.14" y="143.5" ></text>
</g>
<g >
<title>mwait_idle_with_hints.constprop.0 (5 samples, 2.45%)</title><rect x="1155.3" y="197" width="28.9" height="15.0" fill="rgb(252,164,3)" rx="2" ry="2" />
<text  x="1158.29" y="207.5" >mw..</text>
</g>
<g >
<title>swapper (5 samples, 2.45%)</title><rect x="1155.3" y="309" width="28.9" height="15.0" fill="rgb(226,212,21)" rx="2" ry="2" />
<text  x="1158.29" y="319.5" >sw..</text>
</g>
<g >
<title>x86_pmu_enable (173 samples, 84.80%)</title><rect x="148.8" y="69" width="1000.7" height="15.0" fill="rgb(251,26,12)" rx="2" ry="2" />
<text  x="151.82" y="79.5" >x86_pmu_enable</text>
</g>
<g >
<title>kfree (1 samples, 0.49%)</title><rect x="33.1" y="101" width="5.8" height="15.0" fill="rgb(227,128,43)" rx="2" ry="2" />
<text  x="36.14" y="111.5" ></text>
</g>
<g >
<title>page_counter_uncharge (1 samples, 0.49%)</title><rect x="15.8" y="149" width="5.8" height="15.0" fill="rgb(238,119,13)" rx="2" ry="2" />
<text  x="18.78" y="159.5" ></text>
</g>
<g >
<title>ksoftirqd/12 (1 samples, 0.49%)</title><rect x="33.1" y="309" width="5.8" height="15.0" fill="rgb(250,46,31)" rx="2" ry="2" />
<text  x="36.14" y="319.5" ></text>
</g>
<g >
<title>rmap_walk_file (1 samples, 0.49%)</title><rect x="27.4" y="181" width="5.7" height="15.0" fill="rgb(211,113,23)" rx="2" ry="2" />
<text  x="30.35" y="191.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.49%)</title><rect x="1184.2" y="165" width="5.8" height="15.0" fill="rgb(219,73,39)" rx="2" ry="2" />
<text  x="1187.22" y="175.5" ></text>
</g>
<g >
<title>perf (192 samples, 94.12%)</title><rect x="44.7" y="309" width="1110.6" height="15.0" fill="rgb(252,21,35)" rx="2" ry="2" />
<text  x="47.71" y="319.5" >perf</text>
</g>
<g >
<title>all (204 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(218,13,50)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>free_unref_page_commit.constprop.0 (1 samples, 0.49%)</title><rect x="1184.2" y="69" width="5.8" height="15.0" fill="rgb(254,87,4)" rx="2" ry="2" />
<text  x="1187.22" y="79.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.49%)</title><rect x="1184.2" y="245" width="5.8" height="15.0" fill="rgb(207,196,38)" rx="2" ry="2" />
<text  x="1187.22" y="255.5" ></text>
</g>
<g >
<title>acpi_ps_parse_loop (1 samples, 0.49%)</title><rect x="38.9" y="149" width="5.8" height="15.0" fill="rgb(212,23,2)" rx="2" ry="2" />
<text  x="41.92" y="159.5" ></text>
</g>
<g >
<title>page_counter_cancel (1 samples, 0.49%)</title><rect x="15.8" y="133" width="5.8" height="15.0" fill="rgb(228,106,18)" rx="2" ry="2" />
<text  x="18.78" y="143.5" ></text>
</g>
<g >
<title>kthread (1 samples, 0.49%)</title><rect x="38.9" y="277" width="5.8" height="15.0" fill="rgb(231,182,8)" rx="2" ry="2" />
<text  x="41.92" y="287.5" ></text>
</g>
<g >
<title>remove_migration_pte (1 samples, 0.49%)</title><rect x="27.4" y="165" width="5.7" height="15.0" fill="rgb(252,68,11)" rx="2" ry="2" />
<text  x="30.35" y="175.5" ></text>
</g>
<g >
<title>__slab_free (1 samples, 0.49%)</title><rect x="33.1" y="149" width="5.8" height="15.0" fill="rgb(232,36,44)" rx="2" ry="2" />
<text  x="36.14" y="159.5" ></text>
</g>
<g >
<title>event_function (188 samples, 92.16%)</title><rect x="62.1" y="117" width="1087.4" height="15.0" fill="rgb(220,190,29)" rx="2" ry="2" />
<text  x="65.06" y="127.5" >event_function</text>
</g>
<g >
<title>tlb_flush_mmu (1 samples, 0.49%)</title><rect x="1184.2" y="133" width="5.8" height="15.0" fill="rgb(213,174,17)" rx="2" ry="2" />
<text  x="1187.22" y="143.5" ></text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.49%)</title><rect x="33.1" y="293" width="5.8" height="15.0" fill="rgb(254,97,34)" rx="2" ry="2" />
<text  x="36.14" y="303.5" ></text>
</g>
<g >
<title>uncharge_batch (1 samples, 0.49%)</title><rect x="15.8" y="165" width="5.8" height="15.0" fill="rgb(246,66,28)" rx="2" ry="2" />
<text  x="18.78" y="175.5" ></text>
</g>
<g >
<title>acpi_ns_lookup (1 samples, 0.49%)</title><rect x="38.9" y="101" width="5.8" height="15.0" fill="rgb(238,190,3)" rx="2" ry="2" />
<text  x="41.92" y="111.5" ></text>
</g>
<g >
<title>native_write_msr (168 samples, 82.35%)</title><rect x="177.7" y="37" width="971.8" height="15.0" fill="rgb(216,24,17)" rx="2" ry="2" />
<text  x="180.75" y="47.5" >native_write_msr</text>
</g>
<g >
<title>intel_pmu_enable_all (6 samples, 2.94%)</title><rect x="114.1" y="69" width="34.7" height="15.0" fill="rgb(207,228,6)" rx="2" ry="2" />
<text  x="117.12" y="79.5" >in..</text>
</g>
<g >
<title>page_vma_mapped_walk (1 samples, 0.49%)</title><rect x="27.4" y="149" width="5.7" height="15.0" fill="rgb(215,78,23)" rx="2" ry="2" />
<text  x="30.35" y="159.5" ></text>
</g>
<g >
<title>kmem_cache_free (1 samples, 0.49%)</title><rect x="33.1" y="165" width="5.8" height="15.0" fill="rgb(209,118,47)" rx="2" ry="2" />
<text  x="36.14" y="175.5" ></text>
</g>
<g >
<title>kcompactd (4 samples, 1.96%)</title><rect x="10.0" y="261" width="23.1" height="15.0" fill="rgb(214,15,33)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >k..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.49%)</title><rect x="1184.2" y="293" width="5.8" height="15.0" fill="rgb(248,148,26)" rx="2" ry="2" />
<text  x="1187.22" y="303.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.0 (4 samples, 1.96%)</title><rect x="154.6" y="37" width="23.1" height="15.0" fill="rgb(210,151,39)" rx="2" ry="2" />
<text  x="157.61" y="47.5" >_..</text>
</g>
<g >
<title>ret_from_fork (1 samples, 0.49%)</title><rect x="38.9" y="293" width="5.8" height="15.0" fill="rgb(220,197,21)" rx="2" ry="2" />
<text  x="41.92" y="303.5" ></text>
</g>
<g >
<title>rmap_walk (1 samples, 0.49%)</title><rect x="27.4" y="197" width="5.7" height="15.0" fill="rgb(209,48,17)" rx="2" ry="2" />
<text  x="30.35" y="207.5" ></text>
</g>
<g >
<title>generic_exec_single (190 samples, 93.14%)</title><rect x="50.5" y="149" width="1099.0" height="15.0" fill="rgb(217,98,19)" rx="2" ry="2" />
<text  x="53.49" y="159.5" >generic_exec_single</text>
</g>
<g >
<title>cpuidle_enter (5 samples, 2.45%)</title><rect x="1155.3" y="229" width="28.9" height="15.0" fill="rgb(232,199,1)" rx="2" ry="2" />
<text  x="1158.29" y="239.5" >cp..</text>
</g>
<g >
<title>acpi_ns_search_one_scope (1 samples, 0.49%)</title><rect x="38.9" y="69" width="5.8" height="15.0" fill="rgb(252,157,38)" rx="2" ry="2" />
<text  x="41.92" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (192 samples, 94.12%)</title><rect x="44.7" y="293" width="1110.6" height="15.0" fill="rgb(211,62,53)" rx="2" ry="2" />
<text  x="47.71" y="303.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>kcompactd0 (4 samples, 1.96%)</title><rect x="10.0" y="309" width="23.1" height="15.0" fill="rgb(253,77,44)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >k..</text>
</g>
<g >
<title>do_idle (5 samples, 2.45%)</title><rect x="1155.3" y="245" width="28.9" height="15.0" fill="rgb(208,135,35)" rx="2" ry="2" />
<text  x="1158.29" y="255.5" >do..</text>
</g>
<g >
<title>release_pages (1 samples, 0.49%)</title><rect x="1184.2" y="101" width="5.8" height="15.0" fill="rgb(223,78,20)" rx="2" ry="2" />
<text  x="1187.22" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.49%)</title><rect x="1184.2" y="261" width="5.8" height="15.0" fill="rgb(245,188,34)" rx="2" ry="2" />
<text  x="1187.22" y="271.5" ></text>
</g>
<g >
<title>process_one_work (1 samples, 0.49%)</title><rect x="38.9" y="245" width="5.8" height="15.0" fill="rgb(246,199,21)" rx="2" ry="2" />
<text  x="41.92" y="255.5" ></text>
</g>
<g >
<title>migrate_pages (4 samples, 1.96%)</title><rect x="10.0" y="213" width="23.1" height="15.0" fill="rgb(250,77,25)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >m..</text>
</g>
<g >
<title>slab_free_freelist_hook.constprop.0 (1 samples, 0.49%)</title><rect x="33.1" y="85" width="5.8" height="15.0" fill="rgb(205,169,13)" rx="2" ry="2" />
<text  x="36.14" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (192 samples, 94.12%)</title><rect x="44.7" y="277" width="1110.6" height="15.0" fill="rgb(251,87,7)" rx="2" ry="2" />
<text  x="47.71" y="287.5" >do_syscall_64</text>
</g>
<g >
<title>cpuidle_enter_state (5 samples, 2.45%)</title><rect x="1155.3" y="213" width="28.9" height="15.0" fill="rgb(226,28,30)" rx="2" ry="2" />
<text  x="1158.29" y="223.5" >cp..</text>
</g>
</g>
</svg>
